// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "openapi": "3.0.1",
    "info": {
      "title": "Swagger Example API",
      "description": "This is a sample server celler server.",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
        "name": "API Support",
        "url": "http://www.swagger.io/support",
        "email": "support@swagger.io"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0"
    },
    "externalDocs": {
      "description": "OpenAPI",
      "url": "https://swagger.io/resources/open-api/"
    },
    "servers": [
      {
        "url": "//meeyok-cloudrun-image-719562346977.asia-southeast1.run.app/"
      }
    ],
    "paths": {
      "/chats": {
        "get": {
          "tags": [
            "chats"
          ],
          "summary": "List all chats",
          "description": "Retrieves a list of all available chats",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/models.Chat"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "post": {
          "tags": [
            "chats"
          ],
          "summary": "Create a new chat",
          "description": "Creates a new chat with the provided chat details",
          "requestBody": {
            "description": "Chat details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dtos.CreateChatRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Chat"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "chat"
        }
      },
      "/chats/user/{type}": {
        "get": {
          "tags": [
            "chats"
          ],
          "summary": "Get user chats based on type",
          "description": "Retrieves chats based on the given type (group, friend, non-friend)",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "description": "Type of chat (group, friend, non-friend)",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/models.Chat"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/chats/{id}": {
        "get": {
          "tags": [
            "chats"
          ],
          "summary": "Get a specific chat by ID",
          "description": "Retrieves a chat with messages based on the provided ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Chat ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page number for pagination",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "num-message",
              "in": "query",
              "description": "Number of messages per page",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Chat"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "put": {
          "tags": [
            "chats"
          ],
          "summary": "Update a chat",
          "description": "Updates the details of an existing chat",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Chat ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Updated chat details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Chat"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "chat"
        },
        "delete": {
          "tags": [
            "chats"
          ],
          "summary": "Delete a chat",
          "description": "Deletes a chat by its ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Chat ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/chats/{id}/users": {
        "post": {
          "tags": [
            "chats"
          ],
          "summary": "Add users to a chat",
          "description": "Adds specified users to an existing chat",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Chat ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "List of user IDs to add",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dtos.AddUsersRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "users"
        }
      },
      "/friendships": {
        "post": {
          "tags": [
            "friendship"
          ],
          "summary": "Send a friend request",
          "description": "Sends a friend request from one user to another",
          "parameters": [
            {
              "name": "id1",
              "in": "query",
              "description": "User ID of the requester",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id2",
              "in": "query",
              "description": "User ID of the recipient",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Friendship"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/friendships/accept/{userId}": {
        "patch": {
          "tags": [
            "friendship"
          ],
          "summary": "Accept a friend request",
          "description": "Accepts a pending friend request between the current user and the specified user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "Friend's user ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Friendship"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/friendships/reject/{userId}": {
        "patch": {
          "tags": [
            "friendship"
          ],
          "summary": "Reject a friend request",
          "description": "Rejects a pending friend request between the current user and the specified user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "Friend's user ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Friendship"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/friendships/{status}": {
        "get": {
          "tags": [
            "friendship"
          ],
          "summary": "Get list of friends with status filter",
          "description": "Returns a list of users who are friends or pending with the given user",
          "parameters": [
            {
              "name": "status",
              "in": "path",
              "description": "Friendship status: accepted, pending, or rejected",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/models.User"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/posts": {
        "get": {
          "tags": [
            "posts"
          ],
          "summary": "Get all posts",
          "description": "Retrieves all posts from the database",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/models.Post"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "post": {
          "tags": [
            "posts"
          ],
          "summary": "Create a new post",
          "description": "Creates a new post and associates it with the authenticated user",
          "requestBody": {
            "description": "Post details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dtos.CreatePostRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Post"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "post"
        }
      },
      "/posts/{id}": {
        "get": {
          "tags": [
            "posts"
          ],
          "summary": "Get a post by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Post ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.Post"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "posts"
          ],
          "summary": "Update a post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Post ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Updated content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "post"
        },
        "delete": {
          "tags": [
            "posts"
          ],
          "summary": "Delete a post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Post ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "List all users",
          "description": "Retrieves a list of all users",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/models.User"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/users/me": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get current user details",
          "description": "Retrieves the details of the authenticated user",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.User"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/users/username/{username}": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get user by username",
          "description": "Retrieves a user's details by their username",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "Username",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.User"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/users/{id}": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get user by ID",
          "description": "Retrieves a specific user by their ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.User"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "put": {
          "tags": [
            "users"
          ],
          "summary": "Update user details",
          "description": "Updates an existing user's information",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Updated user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "user"
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Delete a user",
          "description": "Removes a user from the system",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/users/{id}/username": {
        "patch": {
          "tags": [
            "users"
          ],
          "summary": "Update username",
          "description": "Updates the username for a specific user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "New username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ],
          "x-codegen-request-body-name": "user"
        }
      },
      "/ws/clients": {
        "get": {
          "tags": [
            "websocket"
          ],
          "summary": "List active WebSocket clients",
          "description": "Retrieves a list of currently connected WebSocket clients",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/ws/init": {
        "get": {
          "tags": [
            "websocket"
          ],
          "summary": "Initialize WebSocket connection",
          "description": "Prepares for WebSocket connection by checking existing client",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/ws/{userID}": {
        "get": {
          "tags": [
            "websocket"
          ],
          "summary": "Establish WebSocket connection",
          "description": "Upgrades HTTP connection to WebSocket for real-time communication",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "101": {
              "description": "Switching Protocols",
              "content": {
  
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/models.HTTPError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "dtos.AddUsersRequest": {
          "required": [
            "users"
          ],
          "type": "object",
          "properties": {
            "users": {
              "type": "array",
              "example": [
                "user123",
                "user456"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "dtos.CreateChatRequest": {
          "required": [
            "name",
            "type",
            "users"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Team Discussion"
            },
            "type": {
              "type": "string",
              "example": "Group",
              "enum": [
                "Individual",
                "Group"
              ]
            },
            "users": {
              "type": "array",
              "example": [
                "user123",
                "user456"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "dtos.CreatePostRequest": {
          "required": [
            "content",
            "title"
          ],
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "example": "Content of the post"
            },
            "title": {
              "type": "string",
              "example": "Title of the post"
            }
          }
        },
        "models.Chat": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/models.Message"
              }
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "models.Friendship": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "description": "Status 'pending', 'accepted'"
            },
            "updatedAt": {
              "type": "string"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            }
          }
        },
        "models.HTTPError": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "models.Message": {
          "type": "object",
          "properties": {
            "createAt": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "models.Post": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            },
            "userId": {
              "type": "string"
            }
          }
        },
        "models.User": {
          "type": "object",
          "properties": {
            "chats": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "email": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "posts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "role": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      },
      "securitySchemes": {
        "BasicAuth": {
          "type": "http",
          "scheme": "basic"
        },
        "Bearer": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header"
        }
      }
    },
    "x-original-swagger-version": "2.0"
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "3.0",
	Host:             "meeyok-cloudrun-image-719562346977.asia-southeast1.run.app",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
